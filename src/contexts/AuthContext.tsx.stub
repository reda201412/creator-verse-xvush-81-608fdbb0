
import React, { createContext, useContext, useState, useEffect } from 'react';

interface User {
  uid?: string;
  id?: string;
  email?: string;
  displayName?: string;
  photoURL?: string;
  username?: string;
  profileImageUrl?: string;
}

interface AuthContextType {
  user: User | null;
  profile: any | null;
  loading: boolean;
  isCreator?: boolean;
  signIn: (email: string, password: string) => Promise<User>;
  signUp: (email: string, password: string) => Promise<User>;
  signOut: () => Promise<void>;
  resetPassword: (email: string) => Promise<void>;
  updateProfile: (data: Partial<User>) => Promise<void>;
  updateEmail: (email: string) => Promise<void>;
  updatePassword: (password: string) => Promise<void>;
}

// Create context with default values
const AuthContext = createContext<AuthContextType>({
  user: null,
  profile: null,
  loading: true,
  isCreator: false,
  signIn: () => Promise.resolve({} as User),
  signUp: () => Promise.resolve({} as User),
  signOut: () => Promise.resolve(),
  resetPassword: () => Promise.resolve(),
  updateProfile: () => Promise.resolve(),
  updateEmail: () => Promise.resolve(),
  updatePassword: () => Promise.resolve(),
});

export function useAuth() {
  return useContext(AuthContext);
}

export function AuthProvider({ children }) {
  const [user, setUser] = useState<User | null>(null);
  const [profile, setProfile] = useState<any | null>(null);
  const [loading, setLoading] = useState(true);

  // Mock authentication methods
  useEffect(() => {
    // Simulate auth state change
    setTimeout(() => {
      const mockUser: User = {
        uid: 'mock-user-123',
        id: 'mock-user-123',
        email: 'user@example.com',
        displayName: 'Mock User',
        photoURL: 'https://i.pravatar.cc/150?img=3',
        username: 'mockuser',
        profileImageUrl: 'https://i.pravatar.cc/150?img=3'
      };
      
      setUser(mockUser);
      
      const mockProfile = {
        id: 'profile-123',
        userId: 'mock-user-123',
        username: 'mockuser',
        displayName: 'Mock User',
        bio: 'This is a mock profile for development.',
        role: 'creator',
        avatarUrl: 'https://i.pravatar.cc/150?img=3',
        createdAt: new Date(),
        updatedAt: new Date(),
      };
      
      setProfile(mockProfile);
      setLoading(false);
    }, 1000);
  }, []);

  const signIn = async (email: string, password: string): Promise<User> => {
    // Mock implementation
    return {
      uid: 'mock-user-123',
      id: 'mock-user-123',
      email,
      displayName: 'Mock User',
      username: 'mockuser',
      profileImageUrl: 'https://i.pravatar.cc/150?img=3'
    };
  };

  const signUp = async (email: string, password: string): Promise<User> => {
    // Mock implementation
    return {
      uid: 'mock-user-123',
      id: 'mock-user-123',
      email,
      displayName: 'New User',
      username: email.split('@')[0],
      profileImageUrl: 'https://i.pravatar.cc/150?img=3'
    };
  };

  const signOut = async (): Promise<void> => {
    // Mock implementation
    setUser(null);
    setProfile(null);
  };

  const resetPassword = async (email: string): Promise<void> => {
    // Mock implementation
    console.log(`Password reset email sent to ${email}`);
  };

  const updateProfile = async (data: Partial<User>): Promise<void> => {
    // Mock implementation
    setUser(prev => prev ? { ...prev, ...data } : null);
  };

  const updateEmail = async (email: string): Promise<void> => {
    // Mock implementation
    setUser(prev => prev ? { ...prev, email } : null);
  };

  const updatePassword = async (password: string): Promise<void> => {
    // Mock implementation
    console.log('Password updated');
  };

  const value = {
    user,
    profile,
    loading,
    isCreator: profile?.role === 'creator',
    signIn,
    signUp,
    signOut,
    resetPassword,
    updateProfile,
    updateEmail,
    updatePassword
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}
