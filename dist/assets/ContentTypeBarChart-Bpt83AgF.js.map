{"version":3,"file":"ContentTypeBarChart-Bpt83AgF.js","sources":["../../src/hooks/use-lazy-load.ts","../../src/components/creator/revenue-charts/ContentTypeBarChart.tsx"],"sourcesContent":["\r\nimport { useState, useEffect, useRef, MutableRefObject } from 'react';\r\n\r\nexport interface UseLazyLoadOptions {\r\n  threshold?: number; // Visibility threshold (0-1)\r\n  rootMargin?: string; // Margin around the root\r\n  once?: boolean; // Load only once or keep observing\r\n}\r\n\r\nexport interface UseLazyLoadReturn {\r\n  elementRef: MutableRefObject<HTMLDivElement | null>;\r\n  isVisible: boolean;\r\n  hasLoaded: boolean;\r\n}\r\n\r\nexport function useLazyLoad(options: UseLazyLoadOptions = {}): UseLazyLoadReturn {\r\n  const [isVisible, setIsVisible] = useState<boolean>(false);\r\n  const [hasLoaded, setHasLoaded] = useState<boolean>(false);\r\n  const elementRef = useRef<HTMLDivElement | null>(null);\r\n  \r\n  const { \r\n    threshold = 0.1,\r\n    rootMargin = '0px',\r\n    once = true\r\n  } = options;\r\n  \r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(\r\n      ([entry]) => {\r\n        const isElementVisible = entry.isIntersecting;\r\n        \r\n        if (isElementVisible) {\r\n          setIsVisible(true);\r\n          setHasLoaded(true);\r\n          \r\n          if (once && elementRef.current) {\r\n            observer.unobserve(elementRef.current);\r\n          }\r\n        } else {\r\n          if (!once) {\r\n            setIsVisible(false);\r\n          }\r\n        }\r\n      },\r\n      { threshold, rootMargin }\r\n    );\r\n    \r\n    const currentElement = elementRef.current;\r\n    if (currentElement) {\r\n      observer.observe(currentElement);\r\n    }\r\n    \r\n    return () => {\r\n      if (currentElement) {\r\n        observer.unobserve(currentElement);\r\n      }\r\n    };\r\n  }, [threshold, rootMargin, once]);\r\n  \r\n  return { elementRef, isVisible, hasLoaded };\r\n}\r\n\r\nexport default useLazyLoad;\r\n","\r\nimport React, { useState, useEffect } from 'react';\r\nimport { \r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n  Cell\r\n} from 'recharts';\r\nimport useLazyLoad from '@/hooks/use-lazy-load';\r\n\r\n// Type de contenu\r\nconst contentTypeData = [\r\n  { name: 'Vid√©os', value: 420 },\r\n  { name: 'Photos', value: 180 },\r\n  { name: 'Tutoriels', value: 320 },\r\n  { name: 'Lives', value: 280 }\r\n];\r\n\r\ninterface ContentTypeBarChartProps {\r\n  className?: string;\r\n}\r\n\r\nconst ContentTypeBarChart: React.FC<ContentTypeBarChartProps> = ({ className }) => {\r\n  const [chartWidth, setChartWidth] = useState<number>(0);\r\n  const [chartHeight, setChartHeight] = useState<number>(0);\r\n  const [isMobile, setIsMobile] = useState<boolean>(false);\r\n  const { elementRef, isVisible, hasLoaded } = useLazyLoad({ threshold: 0.2 });\r\n  \r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setIsMobile(window.innerWidth < 640);\r\n    };\r\n    \r\n    // Initialize\r\n    handleResize();\r\n    \r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Calculate dimensions based on container element\r\n    if (elementRef.current) {\r\n      const { width, height } = elementRef.current.getBoundingClientRect();\r\n      setChartWidth(width);\r\n      setChartHeight(height);\r\n    }\r\n  }, [isVisible, elementRef]);\r\n\r\n  const activeBarColor = '#0ea5e9';\r\n  const hoverColor = '#0284c7';\r\n  const [activeIndex, setActiveIndex] = useState<number | null>(null);\r\n  \r\n  return (\r\n    <div \r\n      ref={elementRef} \r\n      className={`w-full h-full min-h-[200px] ${className || ''}`}\r\n    >\r\n      {(isVisible || hasLoaded) && (\r\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n          <BarChart \r\n            data={contentTypeData}\r\n            margin={isMobile ? \r\n              { top: 5, right: 10, left: 0, bottom: 20 } : \r\n              { top: 10, right: 30, left: 10, bottom: 30 }\r\n            }\r\n            barSize={isMobile ? 15 : 30}\r\n            onMouseMove={(e) => {\r\n              if (e.activeTooltipIndex !== undefined) {\r\n                setActiveIndex(e.activeTooltipIndex);\r\n              }\r\n            }}\r\n            onMouseLeave={() => setActiveIndex(null)}\r\n          >\r\n            <CartesianGrid strokeDasharray=\"3 3\" opacity={0.2} />\r\n            <XAxis \r\n              dataKey=\"name\" \r\n              tick={{ fontSize: isMobile ? 10 : 12 }}\r\n              interval={0}\r\n              angle={isMobile ? -45 : 0}\r\n              textAnchor={isMobile ? \"end\" : \"middle\"}\r\n              height={isMobile ? 50 : 30}\r\n            />\r\n            <YAxis \r\n              width={isMobile ? 30 : 40} \r\n              tick={{ fontSize: isMobile ? 10 : 12 }}\r\n              tickFormatter={(value) => isMobile ? `$${value / 100}` : `$${value}`}\r\n            />\r\n            <Tooltip \r\n              formatter={(value) => [`$${value}`, 'Revenu']} \r\n              contentStyle={{ \r\n                backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n                border: 'none',\r\n                borderRadius: '4px',\r\n                fontSize: isMobile ? '10px' : '12px',\r\n                padding: '8px'\r\n              }} \r\n              wrapperStyle={{\r\n                zIndex: 1000\r\n              }}\r\n            />\r\n            <Bar \r\n              dataKey=\"value\" \r\n              name=\"Revenu ($)\" \r\n              radius={[4, 4, 0, 0]} \r\n              animationDuration={1000}\r\n            >\r\n              {contentTypeData.map((entry, index) => (\r\n                <Cell \r\n                  key={`cell-${index}`} \r\n                  fill={index === activeIndex ? hoverColor : activeBarColor}\r\n                  style={{\r\n                    filter: index === activeIndex ? 'drop-shadow(0 0 3px rgba(14, 165, 233, 0.5))' : 'none',\r\n                    transition: 'fill 0.3s ease, filter 0.3s ease'\r\n                  }}\r\n                />\r\n              ))}\r\n            </Bar>\r\n          </BarChart>\r\n        </ResponsiveContainer>\r\n      )}\r\n      {!hasLoaded && !isVisible && (\r\n        <div className=\"w-full h-full flex items-center justify-center bg-muted/20 animate-pulse rounded-lg\">\r\n          <p className=\"text-muted-foreground text-sm\">Chargement du graphique...</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContentTypeBarChart;\r\n"],"names":["useLazyLoad","options","isVisible","setIsVisible","useState","hasLoaded","setHasLoaded","elementRef","useRef","threshold","rootMargin","once","useEffect","observer","entry","currentElement","contentTypeData","ContentTypeBarChart","className","chartWidth","setChartWidth","chartHeight","setChartHeight","isMobile","setIsMobile","handleResize","width","height","activeBarColor","hoverColor","activeIndex","setActiveIndex","jsxs","jsx","ResponsiveContainer","BarChart","e","CartesianGrid","XAxis","YAxis","value","Tooltip","Bar","index","Cell"],"mappings":"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"}